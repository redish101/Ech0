name: Release

on:
  push:
    tags:
      - 'v*'  # 触发条件：打 Tag，比如 v1.0.0

permissions:
  contents: write
  packages: write

jobs:
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    outputs:
      asset: ${{ steps.upload-frontend.outputs.artifact-id }}
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 10
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: 'web/pnpm-lock.yaml'
      - name: Install and build
        working-directory: ./web
        run: pnpm install && pnpm build --mode production
      - name: Package frontend
        run: tar -czvf frontend.tar.gz -C web/dist .
      - name: Upload frontend artifact
        id: upload-frontend
        uses: actions/upload-artifact@v4
        with:
          name: frontend-asset
          path: frontend.tar.gz
          retention-days: 1

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    # needs: build-frontend
    strategy:
      max-parallel: 3
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          # - goos: linux
          #   goarch: arm
          #   goarm: 7
            
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.3'

      - name: Set Go proxy
        run: go env -w GOPROXY=https://proxy.golang.org,direct

      # 新增步骤：为 arm64 架构安装 musl.cc 交叉编译工具链
      - name: Setup musl.cc for ARM64
        if: matrix.goarch == 'arm64'
        run: |
          wget https://github.com/lin-snow/musl-compilers/releases/download/2025-6-20/aarch64-linux-musl-cross.tgz
          tar -xvf aarch64-linux-musl-cross.tgz
          echo "$(pwd)/aarch64-linux-musl-cross/bin" >> $GITHUB_PATH

      - name: Build backend binary
        run: |
          # 定义强制静态链接所需的链接器参数，方便复用
          STATIC_LDFLAGS="-linkmode external -extldflags '-static'"
          
          mkdir -p dist
          
          if [ "${{ matrix.goarch }}" = "arm64" ]; then
            echo "Building for linux/arm64 with musl-gcc..."
            CC=aarch64-linux-musl-gcc GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO_ENABLED=1 \
            go build -tags netgo -ldflags "$STATIC_LDFLAGS" -o dist/ech0-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/ech0/main.go
          
          else
            echo "Building for linux/amd64 with default gcc..."
            # 对于 amd64 也加入相同的构建标签和链接器参数
            GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO_ENABLED=1 \
            go build -tags netgo -ldflags "$STATIC_LDFLAGS" -o dist/ech0-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/ech0/main.go
          fi

      - name: Package backend binary
        run: |
          cd dist
          tar -czvf ech0-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz ech0-${{ matrix.goos }}-${{ matrix.goarch }}

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: ech0-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarch == 'arm' && 'v7' || '' }}-asset
          path: dist/*.tar.gz
          retention-days: 1

  prepare-release:
    name: Prepare Release Package
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    steps:
      - uses: actions/checkout@v4

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-asset
          path: ./

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ech0-*
          path: ./backend-artifacts
          merge-multiple: true

      - name: Extract backend binaries
        run: |
          mkdir -p dist
          find ./backend-artifacts -name "*.tar.gz" -exec tar -xzvf {} -C dist/ \;

      - name: Copy config files
        run: |
          mkdir -p dist/config
          cp -r config/config.yaml dist/config/
      # ✅ 创建 GitHub Release
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./backend-artifacts/*.tar.gz
            ./dist/config/config.yaml
            ./frontend.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend] 
    steps:
      - name: 🔄 Checkout source code
        uses: actions/checkout@v4
        
      - name: 📦 Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-asset # 下载前端构建产物得到fontend.tar.gz
          path: ./frontend-asset

      - name: 📦 Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ech0-* # 下载后端构建产物得到 ech0-*.tar.gz
          path: ./backend-artifacts

      - name: 🐳 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      # - name: 🐳 Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ vars.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: 📦 Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: 📦 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 📦 Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/ech0:${{ github.ref_name }}
            ghcr.io/${{ github.repository_owner }}/ech0:latest